# -*- coding: utf-8 -*-
"""API_6-Inconsistencias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BRl1LCtjdql6pYSsQCKGtKYsT7-cBzmt
"""

#Importando as bibliotecas
import pandas as pd #data manipulation
import matplotlib.pyplot as plt #plotting library
import numpy as np

#Habilitando a abertura de dados que estão no Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Abrindo csv "Tabela Unica Completa"
Tabela_unica_completa = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando as linhas onde 'Produtividade' é igual a 200
linhas_produtividade_200 = Tabela_unica_completa[Tabela_unica_completa['Produtividade'] == 200]

# Exibindo as linhas filtradas
print(linhas_produtividade_200)

# Filtrando as linhas onde 'Produtividade' é igual a 200
linhas_produtividade_200 = Tabela_unica_completa[Tabela_unica_completa['Produtividade'] == 200]

# Alterando os valores das colunas 'Veiculo' e 'Qtd/pallets'
linhas_produtividade_200['Veiculo'] = 'P24'
linhas_produtividade_200['Qtd/pallets'] = 'P24'
linhas_produtividade_200['Capacidade'] = '3600'
linhas_produtividade_200['Produtividade'] = '100'


# Exibindo as linhas com as alterações
print(linhas_produtividade_200)

# Atualize o DataFrame original com as linhas modificadas
Tabela_unica_completa.loc[linhas_produtividade_200.index] = linhas_produtividade_200

# Salve o DataFrame atualizado em um arquivo CSV
Tabela_unica_completa.to_csv('Tabela_unica_atualizada.csv', index=False)

# Baixe o arquivo CSV para o seu sistema local
from google.colab import files
files.download('Tabela_unica_atualizada.csv')

# Abrindo csv "Tabela Novo DataFrame"
novo_dataframe = pd.read_csv('/content/drive/My Drive/Dados_API/novo_dataframe.csv')

# Filtrando as linhas onde 'Produtividade' é igual a 200
linhas_produtividade_200 = novo_dataframe[novo_dataframe['Produtividade'] == 200]

# Exibindo as linhas filtradas
print(linhas_produtividade_200)

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = novo_dataframe[(novo_dataframe['Incoterm'].str.contains('FOB')) & (novo_dataframe['Vlr.Frete'] > 0)]

# Exibindo apenas as colunas consultadas no resultado
print(resultado[['Incoterm', 'Vlr.Frete']])

import pandas as pd

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = novo_dataframe[(novo_dataframe['Incoterm'].str.contains('FOB')) & (novo_dataframe['Vlr.Frete'] > 0)]

# Substituindo os valores da coluna 'Incoterm' por 'CIF' para as linhas filtradas no resultado
resultado['Incoterm'] = 'CIF'

# Exibindo apenas as colunas 'Incoterm' e 'Vlr.Frete' do resultado
print(resultado[['Incoterm', 'Vlr.Frete']])

import pandas as pd

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = novo_dataframe[(novo_dataframe['Incoterm'].str.contains('FOB')) & (novo_dataframe['Vlr.Frete'] > 0)]

# Substituindo os valores da coluna 'Incoterm' por 'CIF' para as linhas filtradas no resultado
resultado['Incoterm'] = 'CIF'

# Salvando o novo dataframe em um arquivo CSV
resultado.to_csv('novo_dataframe_alterado.csv', index=False)

# Baixando o arquivo CSV para o ambiente local
from google.colab import files
files.download('novo_dataframe_alterado.csv')

# Abrindo csv "Tabela Novo DataFrame"
novo_dataframe_alterado = pd.read_csv('/content/drive/My Drive/Dados_API/novo_dataframe_alterado.csv')

print (novo_dataframe_alterado)

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = novo_dataframe_alterado[(novo_dataframe_alterado['Incoterm'].str.contains('FOB')) & (novo_dataframe_alterado['Vlr.Frete'] > 0)]

# Exibindo apenas as colunas consultadas no resultado
print(resultado[['Incoterm', 'Vlr.Frete']])

# Visualizar as inconsistências corrigidas

## Utilizar a Tabela 'Tabela_unica_inc'

# Abrindo csv "Tabela Unica Inc"
Tabela_unica_inc = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_inc.csv')

# Inconsistência relacionada ao tipo de veículo

# Filtrando as linhas onde 'Produtividade' é igual a 200
linhas_produtividade_200 = Tabela_unica_inc[Tabela_unica_inc['Produtividade'] == 200]

# Exibindo as linhas filtradas
print(linhas_produtividade_200)

# Inconsistência relacionada ao incoterm utilizado

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = Tabela_unica_inc[(Tabela_unica_inc['Incoterm'].str.contains('FOB')) & (Tabela_unica_inc['Vlr.Frete'] > 0)]

# Exibindo apenas as colunas consultadas no resultado
print(resultado)

# Quantidade de erros por fábrica

# Contagem de valores na coluna 'CO.Fabrica'
contagem_fabrica = resultado['CO.Fabrica'].value_counts()

# Exibindo a contagem
print(contagem_fabrica)

# Identificando qual rota apresentou mais esse erro

# Importando a biblioteca Pandas, se já não estiver importada
import pandas as pd

# Calculando a contagem de cada combinação entre 'CO.Fabrica' e 'MUN' no resultado
contagem_rotas = resultado.groupby(['CO.Fabrica', 'MUN']).size().reset_index(name='Contagem')

# Ordenando o DataFrame pelo número de ocorrências em ordem crescente
contagem_rotas_sorted = contagem_rotas.sort_values(by='Contagem')

# Exibindo o resultado
print(contagem_rotas_sorted)

# Gerando um gráfico para visualizar as rotas com maiores erros

# Dicionário que mapeia os códigos de fábrica para os nomes das fábricas
nomes_fabricas = {
    '3423909': 'Itu',
    '3403208': 'Araraquara',
    '3424402': 'Jacareí'
}

# Definindo o tamanho do gráfico
plt.figure(figsize=(10, 6))

# Criando o gráfico de barras
plt.bar(contagem_rotas.index, contagem_rotas['Contagem'])

# Substituindo os códigos de fábrica pelos nomes das fábricas
contagem_rotas['CO.Fabrica'] = contagem_rotas['CO.Fabrica'].astype(str).map(nomes_fabricas)

# Definindo os rótulos do eixo x
plt.xticks(contagem_rotas.index, [fabrica + ' - ' + municipio for fabrica, municipio in zip(contagem_rotas['CO.Fabrica'], contagem_rotas['MUN'])], rotation=90)

# Definindo os rótulos dos eixos e o título
plt.xlabel('Rotas')
plt.ylabel('Número de erros')
plt.title('Contagem de Erros no Incoterm por Rotas')

# Exibindo o gráfico
plt.tight_layout()
plt.show()