# -*- coding: utf-8 -*-
"""API_6_Prod_Fab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGdJtZ9ewcCa-mZFhp29QTpUUUYydEML
"""

#Importando as bibliotecas
import pandas as pd #data manipulation
import matplotlib.pyplot as plt #plotting library

#Habilitando a abertura de dados que estão no Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Abrir Tabela Nova Frete
Tabela_nova_frete = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_nova_frete.csv')

print (Tabela_nova_frete)

## Produtividade das Fábricas

import pandas as pd

# Definindo as capacidades máximas anuais
capacidades_maximas = {
    3403208: 90000000,
    3423909: 56000000,
    3424402: 90000000
}

# Somando as quantidades transportadas por fábrica
soma_quantidades = Tabela_nova_frete.groupby('CO.Fabrica')['Qtd.Transp'].sum()

# Calculando a produtividade por fábrica
produtividade = (soma_quantidades / soma_quantidades.index.map(capacidades_maximas))*100

print(produtividade)

import matplotlib.pyplot as plt

# Mapeando os códigos das fábricas para seus nomes correspondentes
nomes_fabricas = {
    3403208: 'ARARAQUARA',
    3423909: 'ITU',
    3424402: 'JACAREI'
}

# Gerando os gráficos de rosca
for fabrica_id, percentual in produtividade.items():
    fabrica_nome = nomes_fabricas.get(fabrica_id, f'Fábrica {fabrica_id}')
    capacidade_maxima = capacidades_maximas.get(fabrica_id, 1)  # Se a fábrica não estiver no dicionário, definimos a capacidade máxima como 1 para evitar divisão por zero
    percentual_utilizado = min(percentual, 100)  # Garantindo que o percentual utilizado não seja superior a 100

    # Criando o gráfico de rosca
    plt.figure(figsize=(6, 6))
    plt.title(f'Distribuição de Produtividade - {fabrica_nome}')
    labels = ['Produtividade Utilizada', 'Capacidade Restante']
    sizes = [percentual_utilizado, 100 - percentual_utilizado]
    colors = ['lightcoral', 'lightskyblue']
    plt.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=140)
    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
    plt.show()

## Quantidade de viagens realizadas a cada mês


# Agrupando os dados por mês e contando o número de viagens em cada mês
viagens_por_mes = Tabela_nova_frete.groupby('Mes.Base').size()

# Exibindo o resultado
print(viagens_por_mes)

# Criando o gráfico de linhas
plt.figure(figsize=(10, 6))  # Define o tamanho da figura
viagens_por_mes.plot(kind='line', marker='o', color='blue')  # Cria o gráfico de linhas
plt.title('Número de viagens por mês')  # Define o título do gráfico
plt.xlabel('Mês')  # Define o rótulo do eixo x
plt.ylabel('Número de viagens')  # Define o rótulo do eixo y
plt.grid(True)  # Habilita a grade no gráfico
plt.xticks(rotation=45)  # Rotaciona os rótulos do eixo x para melhor visualização
plt.tight_layout()  # Ajusta o layout
plt.show()  # Exibe o gráfico

## Calculando a quantidade transportada por fabrica

# Agrupando os dados por fábrica e somando a quantidade transportada em cada fábrica
quantidade_por_fabrica = Tabela_nova_frete.groupby('CO.Fabrica')['Qtd.Transp'].sum()

# Exibindo o resultado
print(quantidade_por_fabrica)

## Gráfico comparando a capacidade produtiva e o que foi transportado

# Capacidade máxima de cada fábrica
capacidade_maxima = {
    3403208: 90000000,
    3423909: 56000000,
    3424402: 90000000
}

# Agrupando os dados por fábrica e somando a quantidade transportada em cada fábrica
quantidade_por_fabrica = Tabela_nova_frete.groupby('CO.Fabrica')['Qtd.Transp'].sum()

# Criando DataFrame com capacidade máxima e quantidade transportada
df = pd.DataFrame({
    'Capacidade Máxima': capacidade_maxima,
    'Quantidade Transportada': quantidade_por_fabrica
})

# Mapeando os códigos das fábricas para seus nomes correspondentes
nomes_fabricas = {
    3403208: 'ARARAQUARA',
    3423909: 'ITU',
    3424402: 'JACAREI'
}
df.index = df.index.map(nomes_fabricas)

# Criando o gráfico de barras horizontais
ax = df.plot(kind='barh', figsize=(10, 6))
plt.title('Capacidade Máxima vs. Quantidade Transportada por Fábrica')
plt.xlabel('Quantidade')
plt.ylabel('Fábrica')

# Adicionando os nomes das fábricas às barras
for i, v in enumerate(df['Capacidade Máxima']):
    ax.text(v + 1000000, i - 0.1, str(v), color='black')

for i, v in enumerate(df['Quantidade Transportada']):
    ax.text(v + 1000000, i + 0.1, str(v), color='black')

plt.tight_layout()
plt.show()

# Analisando a quantidade de CIF e FOB utilizado por cada fabrica

# Agrupando os dados por fábrica e incoterm e somando a quantidade correspondente em cada grupo
quantidade_por_fabrica_e_incoterm = Tabela_nova_frete.groupby(['CO.Fabrica', 'Incoterm']).size()

# Exibindo o resultado
print(quantidade_por_fabrica_e_incoterm)

# Filtrando apenas os dados de CIF e FOB
dados_cif_fob = Tabela_nova_frete[Tabela_nova_frete['Incoterm'].isin(['CIF', 'FOB'])]

# Agrupando os dados por fábrica e incoterm e somando a quantidade correspondente em cada grupo
quantidade_por_fabrica_e_incoterm = dados_cif_fob.groupby(['CO.Fabrica', 'Incoterm']).size().unstack(fill_value=0)

# Mapeando os códigos das fábricas para seus nomes correspondentes
quantidade_por_fabrica_e_incoterm.index = quantidade_por_fabrica_e_incoterm.index.map(nomes_fabricas)

# Criando o gráfico de barras
ax = quantidade_por_fabrica_e_incoterm.plot(kind='bar', figsize=(10, 6))
plt.title('Quantidade de CIF e FOB por Fábrica')
plt.xlabel('Fábrica')
plt.ylabel('Quantidade')
plt.xticks(rotation=45)  # Rotaciona os rótulos do eixo x para melhor visualização
plt.legend(title='Incoterm')
plt.tight_layout()
plt.show()

# Identificação das cidades com maiores quantidades transportadas de cada fabrica

# Agrupando os dados por fábrica e cidade e somando a quantidade movimentada em cada grupo
quantidade_por_cidade = Tabela_nova_frete.groupby(['CO.Fabrica', 'MUN'])['Qtd.Transp'].sum()

# Resetando o índice para facilitar a manipulação
quantidade_por_cidade = quantidade_por_cidade.reset_index(name='Quantidade')

# Ordenando os dados por fábrica e quantidade em ordem decrescente
quantidade_por_cidade = quantidade_por_cidade.sort_values(by=['CO.Fabrica', 'Quantidade'], ascending=[True, False])

# Exibindo as três cidades com os maiores números de viagens para cada fábrica
for fabrica, dados_fabrica in quantidade_por_cidade.groupby('CO.Fabrica'):
    print(f"Fabrica: {fabrica}")
    print(dados_fabrica.head(3))
    print()

import matplotlib.pyplot as plt
import numpy as np

# Resultados obtidos do código anterior
resultados = {
    'Araraquara': ['São Paulo', 'Campinas', 'São José dos Campos'],
    'Itu': ['São Paulo', 'Ribeirão Preto', 'Taubaté'],
    'Jacareí': ['São Paulo', 'Campinas', 'Valinhos']
}

# Quantidade por cidade já agrupados e ordenados
fabricas = ['Araraquara', 'Itu', 'Jacareí']
quantidades_A = [24074700, 10975500, 10227000]
quantidades_B = [16204800, 4673400, 4229400]
quantidades_C = [21128100, 18655800, 6875100]

# Criando um array de índices para as barras
index = np.arange(len(fabricas))

# Largura das barras
bar_width = 0.2

# Plotagem das barras
plt.figure(figsize=(10, 6))

plt.bar(index - bar_width, quantidades_A, bar_width, label='Araraquara')
plt.bar(index, quantidades_B, bar_width, label='Itu')
plt.bar(index + bar_width, quantidades_C, bar_width, label='Jacareí')

# Adicionando os resultados obtidos ao gráfico
for i, fabrica in enumerate(fabricas):
    resultados_fabrica = resultados[fabrica]
    for j, cidade in enumerate(resultados_fabrica):
        plt.text(i + (j - 1) * bar_width, quantidades_A[j] + 2, cidade, ha='center', va='bottom', rotation=90)

# Configurações adicionais do gráfico
plt.xlabel('Fábricas')
plt.ylabel('Quantidade Transportada')
plt.title('Quantidade Transportada por Fábrica e Cidade')
plt.xticks(index, fabricas)

plt.tight_layout()
plt.show()