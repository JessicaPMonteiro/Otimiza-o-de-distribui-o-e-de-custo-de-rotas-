# -*- coding: utf-8 -*-
"""API_6-Frete.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JSplIw8-rPPhpP7Tkua2VOA4ftSKwYbf
"""

#Importando as bibliotecas
import pandas as pd #data manipulation
import matplotlib.pyplot as plt #plotting library
import numpy as np

#Habilitando a abertura de dados que estão no Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Abrindo csv "Tabela Unica Completa"
Tabela_unica_completa = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

import pandas as pd

# Filtrando as linhas onde a coluna 'Incoterm' contém 'CIF'
resultado = Tabela_unica_completa[Tabela_unica_completa['Incoterm'].str.contains('CIF')]

print(resultado)

# Função para calcular o valor do frete por unidade
def calcular_frete_por_unidade(row):
    return row['Vlr.Frete'] / row['Qtd.Transp']

# Aplicando a função à coluna 'Vlr.Frete' e criando uma nova coluna 'Frete_por_unidade'
resultado['Frete_por_unidade'] = resultado.apply(calcular_frete_por_unidade, axis=1)

print(resultado)

# Salvando o DataFrame em formato CSV
resultado.to_csv('resultado_com_frete.csv', index=False)

# Baixando o arquivo CSV no Google Colab
from google.colab import files
files.download('resultado_com_frete.csv')

# Abrindo csv "Frete_CIF"
Frete_CIF = pd.read_csv('/content/drive/My Drive/Dados_API/Frete_CIF.csv')

# Calculando o valor médio do frete por unidade por fábrica
media_frete_por_unidade_por_fabrica = Frete_CIF.groupby('CO.Fabrica')['Frete_por_unidade'].mean()

print(media_frete_por_unidade_por_fabrica)

import matplotlib.pyplot as plt
import pandas as pd

# Supondo que 'media_frete_por_unidade_por_fabrica' seja um DataFrame do pandas com os resultados
# Se não for um DataFrame, você pode converter para um DataFrame do pandas

# Exemplo de criação de um DataFrame fictício para demonstração
data = {'Codigo_Fabrica': [3423909, 3403208, 3424402],
        'CO.Fabrica': [10, 20, 30]}
media_frete_por_unidade_por_fabrica = pd.DataFrame(data)

# Mapeamento entre códigos de fábrica e nomes de fábrica
fabrica_names = {
    3423909: 'Itu',
    3403208: 'Araraquara',
    3424402: 'Jacareí'
}

# Substituindo os códigos pelas strings correspondentes
media_frete_por_unidade_por_fabrica['Fabrica'] = media_frete_por_unidade_por_fabrica['Codigo_Fabrica'].map(fabrica_names)

# Crie o gráfico de barras
plt.figure(figsize=(10, 6))  # Define o tamanho da figura
media_frete_por_unidade_por_fabrica.plot(kind='bar', x='Fabrica', y='CO.Fabrica', color='skyblue')  # Gera o gráfico de barras
plt.title('Média do Frete por Unidade por Fábrica')  # Adiciona um título ao gráfico
plt.xlabel('Fábrica')  # Adiciona rótulo ao eixo x
plt.ylabel('CO.Fabrica')  # Adiciona rótulo ao eixo y
plt.xticks(rotation=45)  # Rotaciona os rótulos do eixo x para melhor visualização
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Adiciona linhas de grade horizontal
plt.tight_layout()  # Ajusta o layout para evitar que os rótulos se sobreponham

# Mostra o gráfico
plt.show()

# Valor do Frete por mês

# Criando uma lista vazia para armazenar os custos mensais com frete
custo_mensal_frete = []

# Loop de 1 a 12 para calcular o custo mensal com frete
for mes in range(1, 13):
    # Filtrando o DataFrame para o mês atual
    df_mes = Frete_CIF[Frete_CIF['Mes.Base'] == mes]

    # Calculando o custo total do frete para o mês atual
    custo_mes_atual = df_mes['Vlr.Frete'].sum()

    # Adicionando o custo total do frete para o mês atual à lista
    custo_mensal_frete.append(custo_mes_atual)

# Imprimindo o custo mensal com frete
print("Custo mensal com frete:")
for mes, custo in enumerate(custo_mensal_frete, start=1):
    print(f"Mês {mes}: R${custo:.2f}")

import matplotlib.pyplot as plt

# Criando uma lista para os meses de 1 a 12
meses = list(range(1, 13))

# Criando o gráfico de linhas
plt.figure(figsize=(10, 6))
plt.plot(meses, custo_mensal_frete, marker='o', linestyle='-')
plt.title('Custo Mensal com Frete')
plt.xlabel('Mês')
plt.ylabel('Custo (R$)')
plt.grid(True)
plt.xticks(meses)  # Define os ticks do eixo x como os meses de 1 a 12
plt.tight_layout()

# Exibindo o gráfico
plt.show()

import matplotlib.pyplot as plt

# Dicionário que mapeia os códigos das fábricas para os nomes das fábricas
fabrica_nomes = {
    3423909: 'Itu',
    3424402: 'Araraquara',
    3403208: 'Jacareí'
}

# Lista única de fábricas
fabricas = Frete_CIF['CO.Fabrica'].unique()

# Criando um gráfico para cada fábrica
plt.figure(figsize=(12, 8))

for fabrica in fabricas:
    # Criando uma lista para armazenar os custos mensais de frete para esta fábrica
    custo_mensal_frete_fabrica = []

    # Loop de 1 a 12 para calcular o custo mensal com frete para esta fábrica
    for mes in range(1, 13):
        # Filtrando o DataFrame para a fábrica e o mês atual
        df_mes_fabrica = Frete_CIF[(Frete_CIF['CO.Fabrica'] == fabrica) & (Frete_CIF['Mes.Base'] == mes)]

        # Calculando o custo total do frete para esta fábrica e mês atual
        custo_mes_atual_fabrica = df_mes_fabrica['Vlr.Frete'].sum()

        # Adicionando o custo total do frete para esta fábrica e mês atual à lista
        custo_mensal_frete_fabrica.append(custo_mes_atual_fabrica)

    # Plotando o gráfico de linhas para esta fábrica com o nome substituído na legenda
    plt.plot(meses, custo_mensal_frete_fabrica, marker='o', label=fabrica_nomes.get(fabrica, fabrica))

# Configurações do gráfico
plt.title('Custo Mensal com Frete por Fábrica')
plt.xlabel('Mês')
plt.ylabel('Custo (R$)')
plt.grid(True)
plt.xticks(meses)
plt.legend()
plt.tight_layout()

# Exibindo o gráfico
plt.show()

# Agrupando os dados pelo nome da cidade e calculando a soma dos custos de frete para cada cidade
custo_por_cidade = Frete_CIF.groupby('MUN')['Vlr.Frete'].sum().reset_index()

# Ordenando os custos de frete em ordem decrescente
custo_por_cidade = custo_por_cidade.sort_values(by='Vlr.Frete', ascending=False)

# Exibindo as cidades com os maiores custos de frete
print("Cidades com os maiores custos de frete:")
print(custo_por_cidade.head(10))

import matplotlib.pyplot as plt

# Ordenando os custos de frete em ordem crescente
custo_por_cidade = custo_por_cidade.sort_values(by='Vlr.Frete', ascending=True)

# Configurações do gráfico
plt.figure(figsize=(10, 8))

# Plotando o gráfico de barras horizontais
plt.barh(custo_por_cidade['MUN'], custo_por_cidade['Vlr.Frete'], color='skyblue')
plt.xlabel('Custo de Frete (R$)')
plt.ylabel('Cidade')
plt.title('Cidades com Maiores Custos de Frete')

# Exibindo o gráfico
plt.show()