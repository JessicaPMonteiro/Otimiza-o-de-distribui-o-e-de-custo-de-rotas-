# -*- coding: utf-8 -*-
"""API_6-Prod_Veic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jf3W6EJtId1KaijDa27v2v88SK7b8mGW
"""

#Importando as bibliotecas
import pandas as pd #data manipulation
import matplotlib.pyplot as plt #plotting library

#Habilitando a abertura de dados que estão no Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Abrindo csv "Clientes"
clientes = pd.read_csv('/content/drive/My Drive/Dados_API/Clientes.csv')

# Abrindo csv "Rotas"
rotas = pd.read_csv('/content/drive/My Drive/Dados_API/Rotas.csv')

import pandas as pd

#Abrindo csv "Fabricas"
# Lendo o arquivo CSV com a codificação 'utf-8'
fabricas = pd.read_csv('/content/drive/My Drive/Dados_API/Fabricas.csv', encoding='utf-8')

# Mesclar os DataFrames usando a coluna CO.Fabrica
merged_data = pd.merge(rotas, fabricas, on='CO.Fabrica')

# Mesclar novamente usando a coluna CO.Clientes
merged_data = pd.merge(merged_data, clientes, on='CO.Cliente')

# Exibir o DataFrame resultante
print(merged_data)

# Salvar o DataFrame combinado em um novo arquivo CSV
merged_data.to_csv('/content/drive/My Drive/Dados_API/Tabela_unica.csv', index=False)

import pandas as pd

# Carregar o arquivo CSV
data = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica.csv')

# Exibir as 5 primeiras linhas do DataFrame
print(data.head())

# Abrindo csv "Tabela Única"
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica.csv')

#criar uma coluna de capacidade
Tabela_unica['Capacidade'] = None
Tabela_unica.loc[Tabela_unica['Veiculo'] == 'P24', 'Capacidade'] = 3600
Tabela_unica.loc[Tabela_unica['Veiculo'] == 'P12', 'Capacidade'] = 1800

print(Tabela_unica['Capacidade'])

#criar uma coluna de produtividade
Tabela_unica['Produtividade'] = Tabela_unica['Qtd.Transp'] / Tabela_unica['Capacidade'] * 100

print(Tabela_unica['Produtividade'])

# Exibir o DataFrame resultante
print(Tabela_unica)

# Salvando o DataFrame combinado em um novo arquivo CSV
Tabela_unica.to_csv('Tabela_unica_completa.csv', index=False)

from google.colab import files

# Salvando o DataFrame combinado em um novo arquivo CSV
Tabela_unica.to_csv('Tabela_unica_completa.csv', index=False)

# Baixando o arquivo CSV
files.download('Tabela_unica_completa.csv')

import pandas as pd

# Carregar o arquivo CSV
Tabela_unica_completa = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Calculando a média da coluna 'Produtividade'
media_produtividade = Tabela_unica_completa['Produtividade'].mean()

# Calculando a mediana da coluna 'Produtividade'
mediana_produtividade = Tabela_unica_completa['Produtividade'].median()

print("Média da Produtividade:", media_produtividade)
print("Mediana da Produtividade:", mediana_produtividade)

import pandas as pd

# Iterar sobre os meses de 1 a 12
for mes in range(1, 13):
    # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
    df_filtrado = Tabela_unica_completa[Tabela_unica_completa['Mes.Base'] == mes]

    # Calculando a média da coluna 'Produtividade' para o mês atual
    media_produtividade = df_filtrado['Produtividade'].mean()

    # Exibindo a média da coluna 'Produtividade' para o mês atual
    print(f"Média da coluna 'Produtividade' para o mês {mes}: {media_produtividade}")

import pandas as pd
import matplotlib.pyplot as plt

# Listas para armazenar os meses e as médias de produtividade
meses = []
medias_produtividade = []

# Iterar sobre os meses de 1 a 12
for mes in range(1, 13):
    # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
    df_filtrado = Tabela_unica_completa[Tabela_unica_completa['Mes.Base'] == mes]

    # Calculando a média da coluna 'Produtividade' para o mês atual
    media_produtividade = df_filtrado['Produtividade'].mean()

    # Armazenando o mês e a média de produtividade nas listas
    meses.append(mes)
    medias_produtividade.append(media_produtividade)

# Criando o gráfico de linhas
plt.plot(meses, medias_produtividade, marker='o')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês Geral')

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o CSV em um DataFrame
df = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando as linhas onde o valor na coluna 'CO.Fabrica' é igual a "3423909"
df_filtrado = df.loc[Tabela_unica_completa['CO.Fabrica'] == 3423909]

# Listas para armazenar os meses e as médias de produtividade
meses = []
medias_produtividade = []

# Iterar sobre os meses de 1 a 12
for mes in range(1, 13):
    # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
    df_mes = df_filtrado[df_filtrado['Mes.Base'] == mes]

    # Calculando a média da coluna 'Produtividade' para o mês atual
    media_produtividade = df_mes['Produtividade'].mean()

    # Armazenando o mês e a média de produtividade nas listas
    meses.append(mes)
    medias_produtividade.append(media_produtividade)

# Criando o gráfico de linhas
plt.plot(meses, medias_produtividade, marker='o')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês Fábrica de Itu')

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o CSV em um DataFrame
df = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando as linhas onde o valor na coluna 'CO.Fabrica' é igual a "3423909"
df_filtrado = df.loc[df['CO.Fabrica'] == 3403208]

# Listas para armazenar os meses e as médias de produtividade
meses = []
medias_produtividade = []

# Iterar sobre os meses de 1 a 12
for mes in range(1, 13):
    # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
    df_mes = df_filtrado[df_filtrado['Mes.Base'] == mes]

    # Calculando a média da coluna 'Produtividade' para o mês atual
    media_produtividade = df_mes['Produtividade'].mean()

    # Armazenando o mês e a média de produtividade nas listas
    meses.append(mes)
    medias_produtividade.append(media_produtividade)

# Criando o gráfico de linhas
plt.plot(meses, medias_produtividade, marker='o')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês Fábrica de Araraquara')

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o CSV em um DataFrame
df = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando as linhas onde o valor na coluna 'CO.Fabrica' é igual a "3423909"
df_filtrado = df.loc[df['CO.Fabrica'] == 3424402]

# Listas para armazenar os meses e as médias de produtividade
meses = []
medias_produtividade = []

# Iterar sobre os meses de 1 a 12
for mes in range(1, 13):
    # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
    df_mes = df_filtrado[df_filtrado['Mes.Base'] == mes]

    # Calculando a média da coluna 'Produtividade' para o mês atual
    media_produtividade = df_mes['Produtividade'].mean()

    # Armazenando o mês e a média de produtividade nas listas
    meses.append(mes)
    medias_produtividade.append(media_produtividade)

# Criando o gráfico de linhas
plt.plot(meses, medias_produtividade, marker='o')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês Fábrica de Jacareí')

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o CSV em um DataFrame
df = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Lista de CO.Fabrica e seus respectivos nomes
fabricas = {
    3423909: 'Itu',
    3403208: 'Araraquara',
    3424402: 'Jacareí'
}

# Dicionário para armazenar os dados de produtividade média por fábrica
dados_fabricas = {}

# Iterando sobre cada CO.Fabrica
for fabrica, nome in fabricas.items():
    # Filtrando as linhas onde o valor na coluna 'CO.Fabrica' é igual ao da fábrica atual
    df_fabrica = df[df['CO.Fabrica'] == fabrica]

    # Listas para armazenar os meses e as médias de produtividade
    meses = []
    medias_produtividade = []

    # Iterando sobre os meses de 1 a 12
    for mes in range(1, 13):
        # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
        df_mes = df_fabrica[df_fabrica['Mes.Base'] == mes]

        # Calculando a média da coluna 'Produtividade' para o mês atual
        media_produtividade = df_mes['Produtividade'].mean()

        # Armazenando o mês e a média de produtividade nas listas
        meses.append(mes)
        medias_produtividade.append(media_produtividade)

    # Armazenando os dados da fábrica no dicionário
    dados_fabricas[nome] = {'meses': meses, 'produtividade': medias_produtividade}

# Criando o gráfico de linhas para cada fábrica
for nome, dados in dados_fabricas.items():
    plt.plot(dados['meses'], dados['produtividade'], marker='o', label=f'{nome}')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês')

# Adicionando legenda
plt.legend()

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd

# Carregando o DataFrame
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Lista de veículos desejados
veiculos = ['P12', 'P24']

# Dicionário para armazenar a produtividade média por veículo
produtividade_por_veiculo = {}

# Iterando sobre cada veículo
for veiculo in veiculos:
    # Filtrando as linhas onde o valor na coluna 'Veiculo' é igual ao veículo atual
    df_veiculo = Tabela_unica[Tabela_unica['Veiculo'] == veiculo]

    # Calculando a média da coluna 'Produtividade' para o veículo atual
    media_produtividade_veiculo = df_veiculo['Produtividade'].mean()

    # Armazenando a média da produtividade do veículo no dicionário
    produtividade_por_veiculo[veiculo] = media_produtividade_veiculo

# Exibindo os resultados
for veiculo, media_produtividade in produtividade_por_veiculo.items():
    print(f'Veículo: {veiculo}, Produtividade Média: {media_produtividade:.2f}')

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o CSV em um DataFrame
df = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Lista de CO.Fabrica e seus respectivos nomes
fabricas = {
    3423909: 'Itu',
    3403208: 'Araraquara',
    3424402: 'Jacareí'
}

# Lista de veículos desejados
veiculos = ['P12', 'P24']

# Dicionário para armazenar os dados de produtividade média por fábrica e veículo
dados_fabricas_veiculos = {}

# Iterando sobre cada CO.Fabrica
for fabrica, nome_fabrica in fabricas.items():
    # Filtrando as linhas onde o valor na coluna 'CO.Fabrica' é igual ao da fábrica atual
    df_fabrica = df[df['CO.Fabrica'] == fabrica]

    # Dicionário para armazenar os dados de produtividade média por veículo
    dados_veiculos = {}

    # Iterando sobre cada veículo
    for veiculo in veiculos:
        # Filtrando as linhas onde o valor na coluna 'Veiculo' é igual ao veículo atual
        df_veiculo = df_fabrica[df_fabrica['Veiculo'] == veiculo]

        # Listas para armazenar os meses e as médias de produtividade
        meses = []
        medias_produtividade = []

        # Iterando sobre os meses de 1 a 12
        for mes in range(1, 13):
            # Filtrando as linhas onde o valor na coluna 'Mes.Base' é igual ao mês atual
            df_mes = df_veiculo[df_veiculo['Mes.Base'] == mes]

            # Calculando a média da coluna 'Produtividade' para o mês atual
            media_produtividade = df_mes['Produtividade'].mean()

            # Armazenando o mês e a média de produtividade nas listas
            meses.append(mes)
            medias_produtividade.append(media_produtividade)

        # Armazenando os dados do veículo no dicionário
        dados_veiculos[veiculo] = {'meses': meses, 'produtividade': medias_produtividade}

    # Armazenando os dados da fábrica e veículo no dicionário
    dados_fabricas_veiculos[nome_fabrica] = dados_veiculos

# Criando o gráfico de linhas para cada fábrica e veículo
for nome_fabrica, dados_veiculos in dados_fabricas_veiculos.items():
    for veiculo, dados in dados_veiculos.items():
        plt.plot(dados['meses'], dados['produtividade'], marker='o', label=f'{nome_fabrica} - {veiculo}')

# Adicionando rótulos aos eixos
plt.xlabel('Mês')
plt.ylabel('Produtividade Média')

# Adicionando título ao gráfico
plt.title('Produtividade Média por Mês (por Veículo)')

# Adicionando legenda
plt.legend()

# Exibindo o gráfico
plt.grid(True)
plt.show()

import pandas as pd

# Carregando o DataFrame
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Agrupando os dados por cidade ('Mun') e calculando a soma da quantidade transportada ('Qtd.Transp') para cada cidade
quantidade_por_cidade = Tabela_unica.groupby('MUN')['Qtd.Transp'].sum()

# Exibindo as quantidades transportadas por cidade
print(quantidade_por_cidade)

# Ordenando as quantidades por ordem crescente
quantidade_por_cidade = quantidade_por_cidade.sort_values()

# Plotando um gráfico de barras horizontal com as quantidades transportadas por cidade
quantidade_por_cidade.plot(kind='barh', figsize=(10, 8))
plt.title('Quantidade Transportada por Cidade')
plt.xlabel('Quantidade Transportada')
plt.ylabel('Cidade')
plt.grid(axis='x')
plt.show()

import pandas as pd

# Carregando o DataFrame
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Contabilizando o número de linhas com "P12" e "P24" na coluna Veiculo
contagem_veiculos = Tabela_unica['Veiculo'].value_counts()

# Exibindo os resultados
print("Número de linhas com 'P12':", contagem_veiculos.get('P12', 0))
print("Número de linhas com 'P24':", contagem_veiculos.get('P24', 0))

# Criando um gráfico de barras para representar os números de linhas com "P12" e "P24"
ax = contagem_veiculos.plot(kind='bar', figsize=(8, 6), color=['blue', 'green'])
plt.title('Quantidade de Viagens por Veículo')
plt.xlabel('Veículo')
plt.ylabel('Número de Linhas')
plt.xticks(rotation=0)
plt.grid(axis='y')

# Adicionando os valores exatos de cada barra
for i, valor in enumerate(contagem_veiculos):
    ax.text(i, valor + 0.1, str(valor), ha='center')

plt.show()

import pandas as pd

# Carregando o DataFrame
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Agrupando os dados por mês ('Mes.Base') e calculando a soma da quantidade transportada ('Qtd.Transp') para cada mês
quantidade_por_mes = Tabela_unica.groupby('Mes.Base')['Qtd.Transp'].sum()

# Exibindo os resultados
print(quantidade_por_mes)

import pandas as pd

# Carregando o DataFrame
Tabela_unica = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando os dados apenas para os veículos 'P12' e 'P24'
Tabela_veiculos = Tabela_unica[Tabela_unica['Veiculo'].isin(['P12', 'P24'])]

# Agrupando os dados por mês ('Mes.Base'), veículo ('Veiculo') e calculando a soma da quantidade transportada ('Qtd.Transp') para cada combinação
quantidade_por_mes_veiculo = Tabela_veiculos.groupby(['Mes.Base', 'Veiculo'])['Qtd.Transp'].sum()

# Exibindo os resultados
print(quantidade_por_mes_veiculo)

import pandas as pd
import matplotlib.pyplot as plt

# Carregando o DataFrame
Tabela_unica_completa = pd.read_csv('/content/drive/My Drive/Dados_API/Tabela_unica_completa.csv')

# Filtrando os dados apenas para os veículos 'P12' e 'P24'
Tabela_veiculos = Tabela_unica_completa[Tabela_unica_completa['Veiculo'].isin(['P12', 'P24'])]

# Agrupando os dados por mês ('Mes.Base'), veículo ('Veiculo') e calculando a soma da quantidade transportada ('Qtd.Transp') para cada combinação
quantidade_por_mes_veiculo = Tabela_veiculos.groupby(['Mes.Base', 'Veiculo'])['Qtd.Transp'].sum().unstack()

# Plotando o gráfico de barras
quantidade_por_mes_veiculo.plot(kind='bar', color=['blue', 'orange'])

# Desativando a notação científica no eixo y
plt.ticklabel_format(style='plain', axis='y')

# Adicionando título e rótulos aos eixos
plt.title('Quantidade Transportada por Mês (por Veículo)')
plt.xlabel('Mês')
plt.ylabel('Quantidade Transportada')

# Exibindo o gráfico
plt.show()

import pandas as pd

# Filtrando as linhas onde a coluna 'Incoterm' contém 'CIF'
resultado = Tabela_unica_completa[Tabela_unica_completa['Incoterm'].str.contains('CIF')]

print(resultado)

# Filtrando as linhas onde a coluna 'Incoterm' contém 'CIF' e a coluna 'Vlr.Frete' contém o valor 0
resultado = Tabela_unica_completa[(Tabela_unica_completa['Incoterm'].str.contains('CIF')) & (Tabela_unica_completa['Vlr.Frete'] == 0)]

print(resultado)

# Filtrando as linhas onde a coluna 'Incoterm' contém 'FOB' e a coluna 'Vlr.Frete' contém o valor maior que 0
resultado = Tabela_unica_completa[(Tabela_unica_completa['Incoterm'].str.contains('FOB')) & (Tabela_unica_completa['Vlr.Frete'] > 0)]

# Exibindo apenas as colunas consultadas no resultado
print(resultado[['Incoterm', 'Vlr.Frete']])